// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_helloworld_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_helloworld_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_helloworld_2eproto;
namespace helloworld {
class HelloReply;
struct HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
struct HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
}  // namespace helloworld
PROTOBUF_NAMESPACE_OPEN
template<> ::helloworld::HelloReply* Arena::CreateMaybeMessage<::helloworld::HelloReply>(Arena*);
template<> ::helloworld::HelloRequest* Arena::CreateMaybeMessage<::helloworld::HelloRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace helloworld {

// ===================================================================

class HelloRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  ~HelloRequest() override;
  explicit PROTOBUF_CONSTEXPR HelloRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloRequest& from) {
    HelloRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipeDataFieldNumber = 2,
    kSizeArrFieldNumber = 4,
    kTimeEpochFieldNumber = 5,
    kNameFieldNumber = 1,
    kDatablobFieldNumber = 6,
    kSizeAllFieldNumber = 3,
  };
  // repeated int32 tipe_data = 2;
  int tipe_data_size() const;
  private:
  int _internal_tipe_data_size() const;
  public:
  void clear_tipe_data();
  private:
  int32_t _internal_tipe_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_tipe_data() const;
  void _internal_add_tipe_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_tipe_data();
  public:
  int32_t tipe_data(int index) const;
  void set_tipe_data(int index, int32_t value);
  void add_tipe_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      tipe_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_tipe_data();

  // repeated int32 size_arr = 4;
  int size_arr_size() const;
  private:
  int _internal_size_arr_size() const;
  public:
  void clear_size_arr();
  private:
  int32_t _internal_size_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_size_arr() const;
  void _internal_add_size_arr(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_size_arr();
  public:
  int32_t size_arr(int index) const;
  void set_size_arr(int index, int32_t value);
  void add_size_arr(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      size_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_size_arr();

  // repeated int32 timeEpoch = 5;
  int timeepoch_size() const;
  private:
  int _internal_timeepoch_size() const;
  public:
  void clear_timeepoch();
  private:
  int32_t _internal_timeepoch(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_timeepoch() const;
  void _internal_add_timeepoch(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_timeepoch();
  public:
  int32_t timeepoch(int index) const;
  void set_timeepoch(int index, int32_t value);
  void add_timeepoch(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      timeepoch() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_timeepoch();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes datablob = 6;
  void clear_datablob();
  const std::string& datablob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datablob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datablob();
  PROTOBUF_NODISCARD std::string* release_datablob();
  void set_allocated_datablob(std::string* datablob);
  private:
  const std::string& _internal_datablob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datablob(const std::string& value);
  std::string* _internal_mutable_datablob();
  public:

  // int32 size_all = 3;
  void clear_size_all();
  int32_t size_all() const;
  void set_size_all(int32_t value);
  private:
  int32_t _internal_size_all() const;
  void _internal_set_size_all(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:helloworld.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > tipe_data_;
    mutable std::atomic<int> _tipe_data_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > size_arr_;
    mutable std::atomic<int> _size_arr_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > timeepoch_;
    mutable std::atomic<int> _timeepoch_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datablob_;
    int32_t size_all_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_helloworld_2eproto;
};
// -------------------------------------------------------------------

class HelloReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.HelloReply) */ {
 public:
  inline HelloReply() : HelloReply(nullptr) {}
  ~HelloReply() override;
  explicit PROTOBUF_CONSTEXPR HelloReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReply(const HelloReply& from);
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloReply& from) {
    HelloReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.HelloReply";
  }
  protected:
  explicit HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipeDataFieldNumber = 2,
    kSizeArrFieldNumber = 4,
    kTimeEpochFieldNumber = 5,
    kNameFieldNumber = 1,
    kDatablobFieldNumber = 6,
    kSizeAllFieldNumber = 3,
  };
  // repeated int32 tipe_data = 2;
  int tipe_data_size() const;
  private:
  int _internal_tipe_data_size() const;
  public:
  void clear_tipe_data();
  private:
  int32_t _internal_tipe_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_tipe_data() const;
  void _internal_add_tipe_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_tipe_data();
  public:
  int32_t tipe_data(int index) const;
  void set_tipe_data(int index, int32_t value);
  void add_tipe_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      tipe_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_tipe_data();

  // repeated int32 size_arr = 4;
  int size_arr_size() const;
  private:
  int _internal_size_arr_size() const;
  public:
  void clear_size_arr();
  private:
  int32_t _internal_size_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_size_arr() const;
  void _internal_add_size_arr(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_size_arr();
  public:
  int32_t size_arr(int index) const;
  void set_size_arr(int index, int32_t value);
  void add_size_arr(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      size_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_size_arr();

  // repeated int32 timeEpoch = 5;
  int timeepoch_size() const;
  private:
  int _internal_timeepoch_size() const;
  public:
  void clear_timeepoch();
  private:
  int32_t _internal_timeepoch(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_timeepoch() const;
  void _internal_add_timeepoch(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_timeepoch();
  public:
  int32_t timeepoch(int index) const;
  void set_timeepoch(int index, int32_t value);
  void add_timeepoch(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      timeepoch() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_timeepoch();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes datablob = 6;
  void clear_datablob();
  const std::string& datablob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datablob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datablob();
  PROTOBUF_NODISCARD std::string* release_datablob();
  void set_allocated_datablob(std::string* datablob);
  private:
  const std::string& _internal_datablob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datablob(const std::string& value);
  std::string* _internal_mutable_datablob();
  public:

  // int32 size_all = 3;
  void clear_size_all();
  int32_t size_all() const;
  void set_size_all(int32_t value);
  private:
  int32_t _internal_size_all() const;
  void _internal_set_size_all(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:helloworld.HelloReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > tipe_data_;
    mutable std::atomic<int> _tipe_data_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > size_arr_;
    mutable std::atomic<int> _size_arr_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > timeepoch_;
    mutable std::atomic<int> _timeepoch_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datablob_;
    int32_t size_all_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_helloworld_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:helloworld.HelloRequest.name)
  return _s;
}
inline const std::string& HelloRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:helloworld.HelloRequest.name)
  return _impl_.name_.Release();
}
inline void HelloRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloRequest.name)
}

// repeated int32 tipe_data = 2;
inline int HelloRequest::_internal_tipe_data_size() const {
  return _impl_.tipe_data_.size();
}
inline int HelloRequest::tipe_data_size() const {
  return _internal_tipe_data_size();
}
inline void HelloRequest::clear_tipe_data() {
  _impl_.tipe_data_.Clear();
}
inline int32_t HelloRequest::_internal_tipe_data(int index) const {
  return _impl_.tipe_data_.Get(index);
}
inline int32_t HelloRequest::tipe_data(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.tipe_data)
  return _internal_tipe_data(index);
}
inline void HelloRequest::set_tipe_data(int index, int32_t value) {
  _impl_.tipe_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.tipe_data)
}
inline void HelloRequest::_internal_add_tipe_data(int32_t value) {
  _impl_.tipe_data_.Add(value);
}
inline void HelloRequest::add_tipe_data(int32_t value) {
  _internal_add_tipe_data(value);
  // @@protoc_insertion_point(field_add:helloworld.HelloRequest.tipe_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloRequest::_internal_tipe_data() const {
  return _impl_.tipe_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloRequest::tipe_data() const {
  // @@protoc_insertion_point(field_list:helloworld.HelloRequest.tipe_data)
  return _internal_tipe_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloRequest::_internal_mutable_tipe_data() {
  return &_impl_.tipe_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloRequest::mutable_tipe_data() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.HelloRequest.tipe_data)
  return _internal_mutable_tipe_data();
}

// int32 size_all = 3;
inline void HelloRequest::clear_size_all() {
  _impl_.size_all_ = 0;
}
inline int32_t HelloRequest::_internal_size_all() const {
  return _impl_.size_all_;
}
inline int32_t HelloRequest::size_all() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.size_all)
  return _internal_size_all();
}
inline void HelloRequest::_internal_set_size_all(int32_t value) {
  
  _impl_.size_all_ = value;
}
inline void HelloRequest::set_size_all(int32_t value) {
  _internal_set_size_all(value);
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.size_all)
}

// repeated int32 size_arr = 4;
inline int HelloRequest::_internal_size_arr_size() const {
  return _impl_.size_arr_.size();
}
inline int HelloRequest::size_arr_size() const {
  return _internal_size_arr_size();
}
inline void HelloRequest::clear_size_arr() {
  _impl_.size_arr_.Clear();
}
inline int32_t HelloRequest::_internal_size_arr(int index) const {
  return _impl_.size_arr_.Get(index);
}
inline int32_t HelloRequest::size_arr(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.size_arr)
  return _internal_size_arr(index);
}
inline void HelloRequest::set_size_arr(int index, int32_t value) {
  _impl_.size_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.size_arr)
}
inline void HelloRequest::_internal_add_size_arr(int32_t value) {
  _impl_.size_arr_.Add(value);
}
inline void HelloRequest::add_size_arr(int32_t value) {
  _internal_add_size_arr(value);
  // @@protoc_insertion_point(field_add:helloworld.HelloRequest.size_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloRequest::_internal_size_arr() const {
  return _impl_.size_arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloRequest::size_arr() const {
  // @@protoc_insertion_point(field_list:helloworld.HelloRequest.size_arr)
  return _internal_size_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloRequest::_internal_mutable_size_arr() {
  return &_impl_.size_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloRequest::mutable_size_arr() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.HelloRequest.size_arr)
  return _internal_mutable_size_arr();
}

// repeated int32 timeEpoch = 5;
inline int HelloRequest::_internal_timeepoch_size() const {
  return _impl_.timeepoch_.size();
}
inline int HelloRequest::timeepoch_size() const {
  return _internal_timeepoch_size();
}
inline void HelloRequest::clear_timeepoch() {
  _impl_.timeepoch_.Clear();
}
inline int32_t HelloRequest::_internal_timeepoch(int index) const {
  return _impl_.timeepoch_.Get(index);
}
inline int32_t HelloRequest::timeepoch(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.timeEpoch)
  return _internal_timeepoch(index);
}
inline void HelloRequest::set_timeepoch(int index, int32_t value) {
  _impl_.timeepoch_.Set(index, value);
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.timeEpoch)
}
inline void HelloRequest::_internal_add_timeepoch(int32_t value) {
  _impl_.timeepoch_.Add(value);
}
inline void HelloRequest::add_timeepoch(int32_t value) {
  _internal_add_timeepoch(value);
  // @@protoc_insertion_point(field_add:helloworld.HelloRequest.timeEpoch)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloRequest::_internal_timeepoch() const {
  return _impl_.timeepoch_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloRequest::timeepoch() const {
  // @@protoc_insertion_point(field_list:helloworld.HelloRequest.timeEpoch)
  return _internal_timeepoch();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloRequest::_internal_mutable_timeepoch() {
  return &_impl_.timeepoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloRequest::mutable_timeepoch() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.HelloRequest.timeEpoch)
  return _internal_mutable_timeepoch();
}

// bytes datablob = 6;
inline void HelloRequest::clear_datablob() {
  _impl_.datablob_.ClearToEmpty();
}
inline const std::string& HelloRequest::datablob() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.datablob)
  return _internal_datablob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloRequest::set_datablob(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datablob_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.datablob)
}
inline std::string* HelloRequest::mutable_datablob() {
  std::string* _s = _internal_mutable_datablob();
  // @@protoc_insertion_point(field_mutable:helloworld.HelloRequest.datablob)
  return _s;
}
inline const std::string& HelloRequest::_internal_datablob() const {
  return _impl_.datablob_.Get();
}
inline void HelloRequest::_internal_set_datablob(const std::string& value) {
  
  _impl_.datablob_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloRequest::_internal_mutable_datablob() {
  
  return _impl_.datablob_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloRequest::release_datablob() {
  // @@protoc_insertion_point(field_release:helloworld.HelloRequest.datablob)
  return _impl_.datablob_.Release();
}
inline void HelloRequest::set_allocated_datablob(std::string* datablob) {
  if (datablob != nullptr) {
    
  } else {
    
  }
  _impl_.datablob_.SetAllocated(datablob, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datablob_.IsDefault()) {
    _impl_.datablob_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloRequest.datablob)
}

// -------------------------------------------------------------------

// HelloReply

// string name = 1;
inline void HelloReply::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HelloReply::name() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloReply::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.name)
}
inline std::string* HelloReply::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:helloworld.HelloReply.name)
  return _s;
}
inline const std::string& HelloReply::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HelloReply::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReply::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloReply::release_name() {
  // @@protoc_insertion_point(field_release:helloworld.HelloReply.name)
  return _impl_.name_.Release();
}
inline void HelloReply::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloReply.name)
}

// repeated int32 tipe_data = 2;
inline int HelloReply::_internal_tipe_data_size() const {
  return _impl_.tipe_data_.size();
}
inline int HelloReply::tipe_data_size() const {
  return _internal_tipe_data_size();
}
inline void HelloReply::clear_tipe_data() {
  _impl_.tipe_data_.Clear();
}
inline int32_t HelloReply::_internal_tipe_data(int index) const {
  return _impl_.tipe_data_.Get(index);
}
inline int32_t HelloReply::tipe_data(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.tipe_data)
  return _internal_tipe_data(index);
}
inline void HelloReply::set_tipe_data(int index, int32_t value) {
  _impl_.tipe_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.tipe_data)
}
inline void HelloReply::_internal_add_tipe_data(int32_t value) {
  _impl_.tipe_data_.Add(value);
}
inline void HelloReply::add_tipe_data(int32_t value) {
  _internal_add_tipe_data(value);
  // @@protoc_insertion_point(field_add:helloworld.HelloReply.tipe_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloReply::_internal_tipe_data() const {
  return _impl_.tipe_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloReply::tipe_data() const {
  // @@protoc_insertion_point(field_list:helloworld.HelloReply.tipe_data)
  return _internal_tipe_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloReply::_internal_mutable_tipe_data() {
  return &_impl_.tipe_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloReply::mutable_tipe_data() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.HelloReply.tipe_data)
  return _internal_mutable_tipe_data();
}

// int32 size_all = 3;
inline void HelloReply::clear_size_all() {
  _impl_.size_all_ = 0;
}
inline int32_t HelloReply::_internal_size_all() const {
  return _impl_.size_all_;
}
inline int32_t HelloReply::size_all() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.size_all)
  return _internal_size_all();
}
inline void HelloReply::_internal_set_size_all(int32_t value) {
  
  _impl_.size_all_ = value;
}
inline void HelloReply::set_size_all(int32_t value) {
  _internal_set_size_all(value);
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.size_all)
}

// repeated int32 size_arr = 4;
inline int HelloReply::_internal_size_arr_size() const {
  return _impl_.size_arr_.size();
}
inline int HelloReply::size_arr_size() const {
  return _internal_size_arr_size();
}
inline void HelloReply::clear_size_arr() {
  _impl_.size_arr_.Clear();
}
inline int32_t HelloReply::_internal_size_arr(int index) const {
  return _impl_.size_arr_.Get(index);
}
inline int32_t HelloReply::size_arr(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.size_arr)
  return _internal_size_arr(index);
}
inline void HelloReply::set_size_arr(int index, int32_t value) {
  _impl_.size_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.size_arr)
}
inline void HelloReply::_internal_add_size_arr(int32_t value) {
  _impl_.size_arr_.Add(value);
}
inline void HelloReply::add_size_arr(int32_t value) {
  _internal_add_size_arr(value);
  // @@protoc_insertion_point(field_add:helloworld.HelloReply.size_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloReply::_internal_size_arr() const {
  return _impl_.size_arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloReply::size_arr() const {
  // @@protoc_insertion_point(field_list:helloworld.HelloReply.size_arr)
  return _internal_size_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloReply::_internal_mutable_size_arr() {
  return &_impl_.size_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloReply::mutable_size_arr() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.HelloReply.size_arr)
  return _internal_mutable_size_arr();
}

// repeated int32 timeEpoch = 5;
inline int HelloReply::_internal_timeepoch_size() const {
  return _impl_.timeepoch_.size();
}
inline int HelloReply::timeepoch_size() const {
  return _internal_timeepoch_size();
}
inline void HelloReply::clear_timeepoch() {
  _impl_.timeepoch_.Clear();
}
inline int32_t HelloReply::_internal_timeepoch(int index) const {
  return _impl_.timeepoch_.Get(index);
}
inline int32_t HelloReply::timeepoch(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.timeEpoch)
  return _internal_timeepoch(index);
}
inline void HelloReply::set_timeepoch(int index, int32_t value) {
  _impl_.timeepoch_.Set(index, value);
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.timeEpoch)
}
inline void HelloReply::_internal_add_timeepoch(int32_t value) {
  _impl_.timeepoch_.Add(value);
}
inline void HelloReply::add_timeepoch(int32_t value) {
  _internal_add_timeepoch(value);
  // @@protoc_insertion_point(field_add:helloworld.HelloReply.timeEpoch)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloReply::_internal_timeepoch() const {
  return _impl_.timeepoch_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HelloReply::timeepoch() const {
  // @@protoc_insertion_point(field_list:helloworld.HelloReply.timeEpoch)
  return _internal_timeepoch();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloReply::_internal_mutable_timeepoch() {
  return &_impl_.timeepoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HelloReply::mutable_timeepoch() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.HelloReply.timeEpoch)
  return _internal_mutable_timeepoch();
}

// bytes datablob = 6;
inline void HelloReply::clear_datablob() {
  _impl_.datablob_.ClearToEmpty();
}
inline const std::string& HelloReply::datablob() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.datablob)
  return _internal_datablob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloReply::set_datablob(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datablob_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.datablob)
}
inline std::string* HelloReply::mutable_datablob() {
  std::string* _s = _internal_mutable_datablob();
  // @@protoc_insertion_point(field_mutable:helloworld.HelloReply.datablob)
  return _s;
}
inline const std::string& HelloReply::_internal_datablob() const {
  return _impl_.datablob_.Get();
}
inline void HelloReply::_internal_set_datablob(const std::string& value) {
  
  _impl_.datablob_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReply::_internal_mutable_datablob() {
  
  return _impl_.datablob_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloReply::release_datablob() {
  // @@protoc_insertion_point(field_release:helloworld.HelloReply.datablob)
  return _impl_.datablob_.Release();
}
inline void HelloReply::set_allocated_datablob(std::string* datablob) {
  if (datablob != nullptr) {
    
  } else {
    
  }
  _impl_.datablob_.SetAllocated(datablob, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datablob_.IsDefault()) {
    _impl_.datablob_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloReply.datablob)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto
